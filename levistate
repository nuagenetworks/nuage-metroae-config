#!/bin/bash
LINUX=0
NON_LINUX=1

containerID=''
runningContainerID=''
imageID=''
maxContainerVersion=''
confirmationMessage=''
registryHost='registry.mv.nuagenetworks.net'
metroAEImage="$registryHost:5000/metroae"
osRelease=$LINUX

S3KEY="AKIAJOPWRLAXPCUXZX3A"
S3SECRET="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"
file=metroaecontainer.tar
bucket="nuage-devops"
prefix="images"
temp=/tmp/

checkDocker() {
	docker --version > /dev/null 2> /dev/null

	if [ $? -ne 0 ]
	then
		echo "MetroAE container requires Docker.  Please install at https://docs.docker.com"
		exit 1
	fi
}

getHostOperatingSystem() {

	stat /etc/os-release > /dev/null 2> /dev/null
    
    if [ $? -ne 0 ] 
    then
		osRelease=$NON_LINUX
	fi 
		
}

getMaxContainerVersion() {
	versions=`docker images | grep $metroAEImage | awk '{ print $2 }'`

	maxContainerVersion=''
	for version in $versions
	do
	        if [ -z $maxContainerVersion ]
	        then
	                maxContainerVersion=$version
	        fi

	        if [ $maxContainerVersion \< $version ]
	        then
	                maxContainerVersion=$version
	        fi
	done
	
	if [ -z $maxContainerVersion ]
	then
		maxContainerVersion='current'
	fi
}

getContainerID() {
	getMaxContainerVersion
	containerID=`docker ps -a | grep metroae | grep $maxContainerVersion | awk '{ print $1}'`
}

getRunningContainerID() {
	getMaxContainerVersion
	runningContainerID=`docker ps | grep metroae | grep $maxContainerVersion | awk '{ print $1}'`
}

getImageID() {
	getMaxContainerVersion
	imageID=`docker images | grep metroae | grep $maxContainerVersion | awk '{ print $3}'`
}

checkSelinuxEnforceStatus() { 
	getHostOperatingSystem 
	if [ $osRelease -eq $NON_LINUX ]
	then
		return 0
	fi
	
	enforcement=`getenforce`
	
	if [[ $enforcement == "Enforcing" ]]
	then
		echo "Selinux enforcing has to be turned off for MetroAE container to work properly"
		return 1
	fi
}

stop() {
	getRunningContainerID

	echo $runningContainerID
	if [ -z $runningContainerID  ]
	then
		echo "No Container to stop"
		return 0
	fi

	echo "Stopping MetroAE container..."

	docker stop $runningContainerID
	status=$?
	if [ $status -ne 0 ]
	then
		echo "Stopping MetroAE docker container failed"
	else
		echo "Container successfully stopped"
	fi

	return $status
}

run() {

	getImageID

	if [ -z $imageID ]
	then
		setup
		status=$?
		if [ $status -ne 0 ]
		then
			echo "Unable to setup MetroAE container"
			return $status
		fi
	else
		getContainerID

		if [ -z $containerID ]
		then
			while read -r line; do declare $line; done < ~/.metroae
		    docker run -t -d --network host -v $LEVISTATE_MOUNT_POINT:/data --name levistate $metroAEImage:$maxContainerVersion 2> /dev/null
		else
			docker start $containerID
		fi

	    status=$?
		if [ $status -ne 0 ]
		then
			echo "Unable to run the latest MetroAE docker image"
		fi

		return $status
	fi
}

deleteContainerID() {
	getContainerID
	if [ -z $containerID ]
	then
		echo "No container to remove"
		return 0
	fi

	docker rm $containerID 2> /dev/null

	if [ $? -ne 0 ]
	then
		echo "Remove of MetroAE container failed"
		return 1
	fi
	
	echo "MetroAE container removed successfully"
}

destroy() {
	echo $1
	if [ -z $1 ]
	then
		confirmation="init"
	else
		confirmation=$1
	fi

	while [ $confirmation != "yes" ] && [ $confirmation  != "no" ] && [ $confirmation  != "y" ] && [ $confirmation != "n" ]
	do
		read -p "Do you really want to destroy the MetroAE container (yes/no): " confirmation
	done

	if [ $confirmation != "yes" ] && [ $confirmation != "y" ]
	then
		echo "Destroy cancelled by user"
		return 1
	fi

	stop
	if [ $? -ne 0 ]
	then
		return 1
	fi

	deleteContainerID
	if [ $? -ne 0 ]
	then
		return 1
	fi

	getImageID
	if [ -z $imageID ]
	then
		echo "No image to remove"
		return 0
	fi

	echo "Destroying MetroAE container..."

	docker rmi $imageID  2> /dev/null

	if [ $? -ne 0 ]
	then
		echo "Remove of MetroAE image failed"
		return 1
	fi

	return 0
}

getFromS3()
{
  file=metroaecontainer.tar
  aws_path=/images/
  bucket='nuage-devops'
  date=$(date +"%a, %d %b %Y %T %z")
  content_type='application/x-compressed-tar'
  string="GET\n\n$content_type\n$date\n/$bucket$aws_path$file"
  signature=$(echo -en "${string}" | openssl sha1 -hmac "${S3SECRET}" -binary | base64)
  curl -X GET\
    -H "Host: $bucket.s3.amazonaws.com" \
    -H "Date: $date" \
    -H "Content-Type: $content_type" \
    -H "Authorization: AWS ${S3KEY}:$signature" \
    "https://$bucket.s3.amazonaws.com$aws_path$file" > $temp$file | tee -a ./metroae.log 2>> ./metroae.log
}

pull() {
	if [ ! -z $1 ]
	then
		maxContainerVersion=$1
	fi
	
	ping -c 5 $registryHost >> ./metroae.log 2>> ./metroae.log
	
	if [ $? -ne 0 ]
	then
		echo "Could not ping the local registry to download container" | tee -a ./metroae.log
		echo "Retrieving the container from amazon s3" | tee -a ./metroae.log
		getFromS3
		
		if [ $? -ne 0 ]
		then
			echo "unable to pull metroae container exiting" | tee -a ./metroae.log
			exit 1
		fi
		
		docker load -i $temp$file
	else 
		echo "Retrieving MetroAE container..." | tee -a ./metroae.log
		docker pull $metroAEImage:$maxContainerVersion 2>> ./metroae.log
	fi

	status=$?
	if [ $status -ne 0 ]
	then
		echo "Unable to pull the $maxContainerVersion MetroAE docker image"
		exit 1
	fi

	return $status
}

setup() {
	echo "Setup MetroAE container..."
	
 	getContainerID
	getRunningContainerID
	
	if [ ! -z $containerID ] || [ ! -z $runningContainerID ]
	then
		echo "You already have the MetroAE container setup. Running setup will destroy the"
		echo "existing container and create a new one. Your data on disk will be preserved."
		echo "If you continue, create the new container, and use the same"
		echo "mount points, no changes are required. If you change the mount points,"
		echo "you will need to copy your existing data to the new mount points."
		confirmation="init"
		while [[ $confirmation != "yes" ]] && [[ $confirmation  != "no" ]] && [[ $confirmation  != "y" ]] && [[ $confirmation != "n" ]]
		do
			read -p "Do you want to continue with setup (yes/no): " confirmation
		done
	 
		
		if [[ $confirmation != "yes" ]] && [[ $confirmation != "y" ]]
		then
			echo "Setup Cancelled by user"
			return 1
		fi
	fi
	
	getImageID

	if [ -z $imageID ]
	then
		pull
	fi

	if [ $? -ne 0 ]
	then
		return 1
	fi

	if [ -z $1 ]
	then
		read -p "Specify the full path to store user data on the host system: " path
	else
		path=$1
	fi

	echo LEVISTATE_MOUNT_POINT=$path >> ~/.metroae

	#stop and remove existing container if any
	getRunningContainerID
	if [ ! -z $runningContainerID ]
	then
		stop
	fi
	
	getContainerID
	if [ ! -z $containerID ] 
	then
		deleteContainerID
	fi

	run

	status=0
	if [ $? -ne 0 ]
	then
		return 1
	else

		#download the templates and sample user data
		dockerExec templates update
		status=$?
	fi

	return $status
}

upgradeDocker() {
	destroy
	if [ $? -ne 0 ]
	then
		return 1
	fi

	pull
	run
}

runContainerIfNotRunning() { 
	getRunningContainerID
	
	if [ -z $runningContainerID ]
	then
		run
		getRunningContainerID
	fi
}


dockerExec() {
	runContainerIfNotRunning

	environment=""
	for env in `env`
	do
		environment="$environment -e $env"
	done

	docker exec $environment $runningContainerID /usr/bin/python /source/levistate/levistate.py "$@"
}

interactive() { 
	runContainerIfNotRunning
	docker exec -it $runningContainerID /bin/bash

}

status() {
	docker ps -a
	echo "Currently used docker settings..." 
	while read -r line; do declare $line; done < ~/.metroae
	echo levistate_mount_point=$LEVISTATE_MOUNT_POINT
}

help() {
	echo "Nuage Networks Levistate docker container management script"
	echo "Usage:"
	echo ""
	echo "	./levistate [actions] [options]"
	echo "	[actions]: supported actions are help, version, pull, setup, stop, destroy, upgrade-engine "
	echo ""
	echo "	additionally supports commands that can be executed in the docker container"

	getRunningContainerID 
	
	if [ -z $runningContainerID ] && [ $1 == 0 ]
	then
		exit
	fi

}

# main functionality

checkDocker

if [ $# -eq 0 ]
then
	help 0
fi

checkSelinuxEnforceStatus 
shopt -s extglob
POSITIONAL=()
exec=false
while [ $# -gt 0 ]
do
	key=$1
	case "$key" in
		@(help|--h|-h|--help|-help))
		help ${#ArrayName[@]}
		POSITIONAL+=("$1")
		shift
		;;
		pull)
		if [ -z $2 ] 
		then
			pull
		else
			pull $2
			shift
		fi
		shift
		;;
		setup)
		if [ -z $2 ]
		then
			setup
		else
			setup $2
			shift
		fi
		shift
		;;
		stop)
		stop
		shift
		;;
		destroy)
		if [ -z $2 ]
		then
			destroy
		else
			destroy $2
			shift
		fi
		shift
		;;
		upgrade-engine)
		upgradeDocker
		shift
		;;
		interactive)
		interactive
		shift
		;;
		status)
		status
		shift
		;;
		*)
		POSITIONAL+=("$1")
		exec=true
		shift
		;;
	esac
done

if ($exec == true)
then
	dockerExec "${POSITIONAL[@]}"
fi
